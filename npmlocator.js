// Generated by LiveScript 1.3.1
(function(){
  var isFilePath, fetchUrl, checkUrl, resolvePackage, resolveFileUrl, resolveFile, resolvePath, resolveNodeModule, dirname, normalizePath, joinPath, nodeResolve, oldNormalize, slice$ = [].slice;
  isFilePath = function(name){
    if (name[0] === '/') {
      return true;
    }
    if (name.substring(0, 2) === './') {
      return true;
    }
    if (name.substring(0, 2) === '../') {
      return true;
    }
    return false;
  };
  fetchUrl = function(url){
    return new Promise(function(accept, reject){
      var req;
      req = new XMLHttpRequest;
      req.onload = function(){
        return accept(req.responseText);
      };
      req.onerror = function(){
        reject(req.statusText);
        return false;
      };
      req.open('GET', url, true);
      return req.send(null);
    });
  };
  checkUrl = function(url){
    return new Promise(function(accept, reject){
      var req;
      req = new XMLHttpRequest;
      req.onload = function(){
        return accept(req.responseText);
      };
      req.onerror = function(e){
        window.debugstuff = {
          e: e,
          req: req
        };
        return reject(req.statusText);
      };
      req.open('HEAD', url, true);
      return req.send(null);
    });
  };
  resolvePackage = function(pkg){
    return fetchUrl(pkg + "/package.json").then(function(data){
      var main, ref$;
      main = (ref$ = JSON.parse(data).main) != null ? ref$ : 'index';
      if (main[main.length - 1] === '/') {
        main += "index";
      }
      return resolveFile(pkg + "/" + main);
    });
  };
  resolveFileUrl = function(url){
    return checkUrl(url).then(function(){
      return url;
    });
  };
  resolveFile = function(path){
    return resolveFileUrl(path)['catch'](function(){
      return resolveFileUrl(path + ".js");
    });
  };
  resolvePath = function(path){
    return resolvePackage(path)['catch'](function(){
      return resolveFile(path);
    });
  };
  resolveNodeModule = function(name, path){
    path == null && (path = '');
    return resolvePackage(joinPath(path, 'node_modules', name))['catch'](function(){
      var parts;
      parts = path.split('/');
      parts.pop();
      while (parts[parts.length - 1] === 'node_modules') {
        parts.pop();
      }
      if (parts.length === 0) {
        throw "Node module '" + name + "' at '" + path + "' not found";
      }
      return resolveNodeModule(name, joinPath.apply(null, parts));
    });
  };
  dirname = function(path){
    var parts;
    if (!path) {
      return '';
    }
    parts = path.split('/');
    return parts.slice(0, -1).join('/');
  };
  normalizePath = function(path){
    var parts, root;
    parts = path.split('/');
    root = parts.shift();
    parts = parts.filter(function(p){
      return p !== '' && p !== '.';
    });
    parts.unshift(root);
    return parts.join('/');
  };
  joinPath = function(){
    var parts;
    parts = slice$.call(arguments);
    parts = parts.filter(function(p){
      return p !== '' && p !== '.';
    });
    return parts.join('/');
  };
  nodeResolve = function(name, parent){
    var dir;
    parent == null && (parent = '');
    dir = dirname(normalizePath(parent));
    if (isFilePath(name)) {
      return resolvePath(joinPath(dir, name));
    }
    return resolveNodeModule(name, dir);
  };
  oldNormalize = System.normalize;
  System.normalize = function(path, parent){
    var parts;
    parent = parent != null ? parent.split("!")[0] : void 8;
    parts = path.split('!');
    return nodeResolve(parts[0], parent).then(function(normed){
      return [normed].concat(parts.slice(1)).join("!");
    });
  };
}).call(this);
