// Generated by LiveScript 1.5.0
(function(){
  var isFilePath, fetchUrl, checkUrl, resolvePackage, resolveFileUrl, resolveFile, resolvePath, resolveNodeModule, parentPath, joinPath, builtins, myPath, ref$, builtinsPath, builtinsPromise, nodeResolve, promiseNodeResolve, doNodeResolve, rawNodeResolve, memoize, absURLRegEx, monkeypatch, slice$ = [].slice;
  isFilePath = function(name){
    if (name[0] === '/') {
      return true;
    }
    if (name.substring(0, 2) === './') {
      return true;
    }
    if (name.substring(0, 3) === '../') {
      return true;
    }
    return false;
  };
  fetchUrl = function(url){
    return System.fetch({
      address: url.toString(),
      metadata: {}
    });
  };
  checkUrl = function(url){
    return fetchUrl(url, 'HEAD');
  };
  resolvePackage = function(pkg){
    return fetchUrl(joinPath(pkg, "package.json")).then(function(data){
      var main, ref$;
      main = (ref$ = JSON.parse(data).main) != null ? ref$ : 'index';
      if (main[main.length - 1] === '/') {
        main += "index";
      }
      return resolveFile(joinPath(pkg, main));
    });
  };
  resolveFileUrl = function(url){
    return checkUrl(url).then(function(){
      return url;
    });
  };
  resolveFile = function(path){
    return resolveFileUrl(path)['catch'](function(){
      return resolveFileUrl(path + ".js");
    });
  };
  resolvePath = function(path){
    return resolvePackage(path)['catch'](function(){
      return resolveFile(path);
    });
  };
  resolveNodeModule = function(name, path){
    path == null && (path = '');
    return resolvePackage(joinPath(path, 'node_modules', name))['catch'](function(){
      var ppath, ref$;
      ppath = parentPath(path);
      while ((ref$ = ppath.pathname.split('/'))[ref$.length - 1] === 'node_modules') {
        ppath = parentPath(ppath);
      }
      return resolveNodeModule(name, ppath);
    });
  };
  parentPath = function(path){
    var parts;
    path = new URL(path);
    parts = path.pathname.split('/');
    parts = parts.filter(function(p){
      return p !== '' && p !== '.';
    });
    if (parts.length === 0) {
      throw new Error("No parent path for '" + path + "'");
    }
    parts.pop();
    path.pathname = parts.join('/');
    path.search = '';
    path.hash = '';
    return path;
  };
  joinPath = function(base){
    var parts, res$, i$, to$, ref$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    parts = res$;
    base = new URL(base.toString());
    parts = parts.filter(function(p){
      return p !== '' && p !== '.';
    });
    if ((ref$ = base.pathname)[ref$.length - 1] === '/') {
      base.pathname = base.pathname.slice(0, -1);
    }
    parts.unshift(base.pathname);
    base.pathname = parts.join('/');
    base.pathname = base.pathname.normalize();
    return base;
  };
  builtins = void 8;
  if (typeof document != 'undefined' && document !== null) {
    myPath = parentPath((ref$ = document.getElementsByTagName('script'))[ref$.length - 1].src);
  } else {
    myPath = parentPath("file://" + __filename);
  }
  builtinsPath = joinPath(myPath, 'node_modules/browser-builtins');
  builtinsPromise = fetchUrl(joinPath(builtinsPath, 'package.json')).then(function(data){
    var conf;
    conf = JSON.parse(data);
    return builtins = conf.browser;
  }).then(function(){
    return System['import']("buffer");
  }).then(function(buffer){
    if (typeof window != 'undefined' && window !== null) {
      return window.Buffer = buffer.Buffer;
    }
  });
  nodeResolve = function(){
    var args, res$, i$, to$, orig;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    orig = Promise.resolve(promiseNodeResolve.apply(null, args));
    return orig.then(function(path){
      return path;
    });
  };
  promiseNodeResolve = function(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    if (builtins == null) {
      return builtinsPromise.then(function(){
        return doNodeResolve.apply(null, args);
      });
    }
    return doNodeResolve.apply(null, args);
  };
  doNodeResolve = function(name, parent){
    if (name in builtins) {
      return rawNodeResolve(builtins[name], joinPath(builtinsPath, 'dummy'));
    }
    return rawNodeResolve(name, parent);
  };
  rawNodeResolve = function(name, parent){
    var dir;
    if (parent == null) {
      dir = new URL(System.baseURL);
    } else {
      dir = parentPath(new URL(parent));
    }
    if (isFilePath(name)) {
      return resolvePath(joinPath(dir, name));
    }
    return resolveNodeModule(name, dir);
  };
  memoize = function(f){
    var cache;
    cache = {};
    return function(){
      var args, res$, i$, to$, key;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      key = JSON.stringify(args);
      if (key in cache) {
        return cache[key];
      }
      return cache[key] = f.apply(null, args);
    };
  };
  absURLRegEx = /^[^\/]+:\/\//;
  monkeypatch = function(System){
    var oldNormalize, resolver, normalize;
    oldNormalize = System.normalize;
    resolver = memoize(nodeResolve);
    normalize = function(path, parent, isPlugin){
      var parts, plugins;
      if (path.match(absURLRegEx) || path[0] === '@') {
        return Promise.resolve(path);
      }
      parts = path.split('!');
      path = parts[0], plugins = slice$.call(parts, 1);
      if (this.map && path in this.map) {
        path = this.map[path];
      }
      parent = parent != null ? parent.split("!")[0] : void 8;
      return resolver(path, parent).then(function(normed){
        return [normed].concat(plugins).join('!');
      });
    };
    System.normalize = normalize;
    return System.normalizeSync = function(name){
      return name;
    };
  };
  if (typeof module === 'object') {
    module.exports = monkeypatch;
  } else {
    monkeypatch(System);
  }
}).call(this);

//# sourceMappingURL=npmlocator.js.map
